<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- namespace命名空间，作用是对sql进行分类化管理，理解sql隔离
 使用mapper代理的方法开发
 namespace有很重要的作用 
 这里namespace应该设置成mapper.java的路径
 -->
<mapper namespace="com.ddd.mybatis.mapper.UserMapper">

	<!-- 开启本mapper的namespace下的二级缓存 -->
	<!-- 指定cache接口实现类的类型，mybatis默认使用PerpetualCache  -->
	<cache type="org.mybatis.caches.ehcache.EhcacheCache">
	
	</cache>
	<!-- 在映射文件中配置很多sql语句 -->

	<!-- 通过select执行查询 
	id:用来表示文件中的sql，将sql语句封装到mappedstatement对象中，所以id其实是statement的id 
	parameterType:指定输入参数类型，id是int型
	#{}表示一个占位符 
	#{id}表示id是接受的输入参数，名字是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以是value或者其他名称 
	resultType：结果返回类型所映射的类，是单条记录所映射的对象类型 -->

	
	
	<!-- 通过id查询用户 -->
	<select id="findUserById" parameterType="int"
		resultType="User">
		SELECT * FROM USER WHERE id=#{id}
	</select>
	
	
	<!-- 定义resultMap
	将SELECT id id_,username username_ FROM USER WHERE id=13 
	中的属性名和user中的属性名做一个映射
	type：是resultMap最终映射的Java对象类型，可以使用别名
	id：是对resultMap的唯一标识
	如果被其他的mapper文件引用，需要在前面加namespace
	-->
	<resultMap type="user" id="userResultMap">
		<!-- id表示查询结果的唯一标识，column：查询出来的列名  property：type属性中pojo的属性名 相当于一个中间人完成两个属性名的适配·-->
		<id column="id_" property="id"/>
		<result column="username_" property="username"/>
	</resultMap>
	<!-- 通过resultMap作为输出映射 -->
	<select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
		SELECT id id_,username username_ FROM USER WHERE id=#{id}
	</select>

	<!-- 通过名字查询用户 可能会查询出多条记录 
	resultType：结果返回类型所映射的类，是单条记录所映射的对象类型 所以这里还是用user而不是list 
	使用${}是sql拼接，这是将接收的参数不加任何修饰的拼接成sql 
	但这种可能会引起sql注入，也就是用户可能会输入一些字符串， 让查询条件恒真，例如 
		SELECT * FROM USER WHERE username LIKE '%' OR 1=1 OR '%' 这样就能查询所有数据 
	-->
	<select id="findUserByName" parameterType="java.lang.String"
		resultType="com.ddd.mybatis.pojo.User">
		SELECT * FROM USER WHERE username LIKE '%${value}%'
	</select>

	<!-- 添加用户 parameterType为pojo，来接受一个用户的信息 
	其中id可以省略，因为id是自增的 
	#{}中指定的是pojo的属性名，接受pojo的属性值，mybatis通过ONGL获取对象的属性值 
	-->
	<insert id="insertUser" parameterType="com.ddd.mybatis.pojo.User">
		<!-- 用来返回主键，返回到user中去 
		SELECT LAST_INSERT_ID()：查询刚刚插入的数据的主键id，但是只适用于自增型 
		keyProperty：将查询到主键值中的parameterType指定的对象的那个属性 
		order="AFTER":表示SELECT LAST_INSERT_ID()是在insert执行之后 
		resultType:执行查询的结果返回类型 
		-->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT LAST_INSERT_ID()
		</selectKey>
		<!-- 非自增主键的返回 
		首先使用uuid()生成主键，将其设置到user的对象id属性中 
		在insert执行时从user对象中取出id的属性值返回 
		但是在insert语句中必须添加id这个属性，因为它不是自增的，不能省略
		<selectKey keyProperty="id" order="BEFORE" 
			resultType="java.lang.String"> SELECT UUID() 
		</selectKey> -->

		INSERT INTO USER(username,sex,birthday,address)
		VALUES(#{username},#{sex},#{birthday},#{address})
	</insert>


	<!-- 根据id删除用户 -->
	<delete id="deleteUserById" parameterType="java.lang.Integer">
		DELETE FROM USER WHERE id=#{id}
	</delete>

	<!-- 根据id更新用户
	 需要传入用户的id，需要传入用户的更新信息 
	 parameterType：指定的user对象就包括了这些信息
	 #{id}是从user中接收的id -->
	<update id="updateUser" parameterType="com.ddd.mybatis.pojo.User">
		UPDATE USER SET
		username=#{username},birthday=#{birthday},sex=#{sex},address=#{address}
		WHERE id=#{id}
	</update>
	<!-- sql片段 id是它的标识，一般是基于单表来定义sql，这样sql可重用性才高 ，一般不用where-->
	<sql id="query_user_where">
		<!-- 当第一个条件满足时where可以自动去除这个and -->
		<if test="userCustom!=null">
			<if test="userCustom.sex!=null and userCustom.sex!=''">
				and user.sex=#{userCustom.sex}
			</if>
			<if test="userCustom.username!=null and userCustom.username!=''">
				and user.username LIKE '%${userCustom.username}%'
			</if>
			<if test="ids!=null">
				<!-- 使用foreach遍历传入ids 
					collection：指定输入对象中集合的属性名
					item：每个遍历生成的对象名
					open：开始遍历时要拼接的字符串
					例如：SELECT * FROM USER WHERE user.username LIKE '%伟%' AND ( id=10 OR id=9 OR id=3)
					如果不加括号，sql就错了
					close：结束遍历时拼接的串
					separator：遍历的两个对象中需要拼接的串
				-->
				<foreach collection="ids" item="user_id" open="AND(" close=")" separator="OR">
					id=#{user_id}
				</foreach>
				
				<!-- 实现
				SELECT * FROM USER WHERE user.username LIKE '%伟%' AND id IN (1,3,5,10)
				将open和close和separator更改即可
				<foreach collection="ids" item="user_id" open="AND id IN(" close=")" separator=",">
					#{user_id}
				</foreach>
				 -->
			</if>
		</if>

	</sql>
	
	<!-- 综合查询用户信息 -->
	<select id="findUserList" parameterType="com.ddd.mybatis.pojo.UserQueryVo" resultType="com.ddd.mybatis.pojo.UserCustom">
		<!-- SELECT * FROM USER WHERE user.sex=#{userCustom.sex} AND user.username LIKE '%${userCustom.username}%' -->
		SELECT * FROM USER 
		<where>
			<!-- 引用sql片段的id，如果不在本mapper中需要加namespace，在其下边还可以定义其他sql片段，这也就是为什么在sql片段定义中不写where -->
			<include refid="query_user_where"></include>
		</where>
		
	</select>
	<!-- 综合查询用户信息总数 -->
	<select id="findUserCount" parameterType="com.ddd.mybatis.pojo.UserQueryVo" resultType="int">
		<!-- SELECT COUNT(*) FROM USER WHERE user.sex=#{userCustom.sex} AND user.username LIKE '%${userCustom.username}%' -->
		SELECT COUNT(*) FROM USER
		<where>
			<!-- 引用sql片段的id，如果不在本mapper中需要加namespace，在其下边还可以定义其他sql片段，这也就是为什么在sql片段定义中不写where -->
			<include refid="query_user_where"></include>
		</where>
	</select>
	
	
</mapper>

<!-- 
tips：
1.#{}和${}
#{}表示一个占位符，#{}接收参数可以是简单类型，例如pojo.hashmap等，如果是简单类型#{}中可以写成value或者名称
${}表示一个拼接符，会引起sql注入，${}接收参数也可以是简单类型，如果是简单类型${}中只能写成value
#{}${}接收pojo时使用OGNL来读取pojo的属性
 -->